# ####################################카테고리####################################################
# element(단일) , elements(복수)	설명
# By.ID	태그의 id값으로 추출
# By.NAME	태그의 name값으로 추출
# By.XPATH	태그의 경로로 추출
# By.LINK_TEXT	링크 텍스트값으로 추출
# By.PARTIAL_LINK_TEXT	링크 텍스트의 자식 텍스트 값을 추출
# By.TAG_NAME	태그 이름으로 추출
# By.CLASS_NAME	태그의 클래스명으로 추출
# By.CSS_SELECTOR	css선택자로 추출
class1 = ['','선택안함','패션의류','패션잡화','화장품/미용',
         '디지털/가전','가구/인테리어','출산/육아','식품',
         '스포츠/레저','생활/건강','여가/생활편의']
fashion_cloth_class2 = ['', '선택안함', '여성의류','여성언더웨어/잠옷','남성의류',
                        '남성언더웨어/잠옷'] 
fashion_goods_class2 = ['','선택안함','양말','여성신발','남성신발','신발용품','여성가방',
                        '남성가방','여행용가방/소품','지갑','벨트','모자','장갑',
                        '선글라스/안경테','헤어액세서리','패션소품','시계','순금']
cosmetic_beauty_class2 = ['','선택안함','스킨케어','선케어','클렌징','마스크/팩','베이스메이크업',
                          '색조메이크업','네일케어','바디케어','헤어케어','헤어스타일링','향수',
                          '뷰티소품','남성화장품']
digital_home_appliances_class2 = ['','선택안함','학습기기','게임기/타이틀','PC','PC액세서리','노트북액세서리',
                                  '태블릿PC액세서리','모니터주변기기','주변기기','멀티미디어장비',
                                  '저장장치','PC부품','네트워크장비','소프트웨어','노트북','태블릿PC',
                                  '모니터','휴대폰','휴대폰액세서리','카메라/캠코더용품','광학기기/용품',
                                  '영상가전','음향가전','생활가전','이미용가전','계절가전','주방가전',
                                 '자동차기기']

furniture_class2 = ['','선택안함','침실가구','거실가구','주방가구','수납가구','아동/주니어가구',
                    '서재/사무용가구','아웃도어가구','DIY자재/용품','인테리어소품','침구단품','침구세트',
                    '솜류','카페트/러그','커튼/블라이드','수예','홈데코']

parenting_class2 = ['','선택안함','분유','기저귀','물티슈','이유식','아기간식','수묘용품',
                    '유모차','카시트','외출용품','목욕용품','스킨/바디용품','위생/건강용품',
                    '구강청결용품','유아세제','소독/살균용품','안전용품','유아가구','이유식용품',
                    '임부복','암산부용품','유아침구','출산/돌기념품','신생아의류','유아동잡화',
                    '수영복/용품','유아발육용품','완구/매트','인형','교구','유아용 주얼리',
                    '유아동언더웨어/잠옷']

food_class2 = ['','선택안함','건강식품','다이어트식품','냉동/간편조리식품','축산물','반찬',
               '김치','음료','과자/베이커리','유가공품','수산물','농산물','밀키트','가루/분말류',
               '라면/면류','소스/드레싱','식용유/오일','장류','잼/시럽','제과/제빵재료','조미료',
               '통조림/캔','주류']
sports_class2 = ['','선택안함', '마라톤용품','당구용품','기타스포츠용품','등산','캠핑','골프','헬스',
                 '요가/필라테스','인라인스케이트','스케이트/보드/롤러','오토바이/스쿠터','축구','야구',
                 '농구','배구','탁구','배드민턴','테니스','스쿼시','족구','볼링','스킨스쿠버','검도',
                 '댄스','권투','보호용품','무술용품','수련용품','스포츠액세서리','자전거','스키/보드',
                 '낚시','수영']
health_class2 = ['','선택안함','화방용품','자동차용품','수집품','관상어용품','음반','DVD','종교','주방용품',
                 '세탁용품','건강측정용품','건강관리용품','당뇨관리용품','의료용품','실버용품','재활운동용품',
                 '물리치료/저주파용품','좌욕/좌훈용품','냉온/찜질용품','구강위생용품','눈건강용품','발건강용품',
                 '안마용품','수납/정리용품','청소용품','생활용품','원예/식물','정원/원예용품','블루레이','반려동물',
                 '악기','욕실용품','문구/사무용품','공구']
leisure_class2 = ['','선택안함','원데이클래스','국내여행/체험','해외여행','국내렌터카','생활편의','예체능레슨',
                  '자기계발/취미 레슨','홈케어서비스']
class2 = ['', fashion_cloth_class2, fashion_goods_class2, cosmetic_beauty_class2, digital_home_appliances_class2,
         furniture_class2, parenting_class2, food_class2, sports_class2, health_class2, leisure_class2]
class2[0]


# ####################################반복문 시작####################################################

from selenium import webdriver

from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains

from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from webdriver_manager.chrome import ChromeDriverManager

import time

import openpyxl
import pandas as pd


################################################################################################

onecha = []
twocha = []
threecha = []
name = []
click = []
supply = []
competition = []

customService = Service(ChromeDriverManager().install())  #자동설치 업데이트 되는 크롬드라이버선택
customOption = Options()

# 어떤 크롬드라이브를 쓸것인지 webdriver.Chrome(./'chromedriver.exe') '기본표현', './'는 하위폴더 위치
browser = webdriver.Chrome(service = customService, options = customOption)

# 드라이버를 이용하여, 브라우저 실행./ 엑션체인 객체 만들기
URL = 'https://itemscout.io/'
browser.get(URL)
browser.implicitly_wait(10)
action = ActionChains(browser)

# 아이템스카우트 접속해서 팝업창 끄기
# '//' 지금 위치에서 모든 하위 모든 문서 서칭, '*' 모든 속성 태그중에서 '[@]' 'app'속성중에서
browser.find_element(By.LINK_TEXT,'7일간 보지 않기').click()
browser.find_element(By.XPATH, '//*[@id="app"]/div/header/div/div[4]/a/span/div').click()
browser.implicitly_wait(10)

# browser.find_element(By.CLASS_NAME, 'filter-title-wrapper').click()

# 아이디 입력 (placeholder로 찾기)
browser.find_element(By.CSS_SELECTOR, "div>input[placeholder='이메일']").click()
browser.find_element(By.CSS_SELECTOR, "div>input[placeholder='이메일']").send_keys("chj9953@naver.com")
# 비밀번호 입력 (placeholder로 찾기)
browser.find_element(By.CSS_SELECTOR, "div>input[placeholder='비밀번호']").click()
browser.find_element(By.CSS_SELECTOR, "div>input[placeholder='비밀번호']").send_keys("cv21852185##")
# 로그인 버튼 누르기
browser.find_element(By.XPATH, '//*[@id="app"]/div/main/div/div/div/div/button[2]/span').click()
time.sleep(2)

# 아이템발굴 클릭
browser.find_element(By.XPATH, '//*[@id="app"]/div/header/div/div[2]/a[1]/span').click()

# 튜토리얼 팝업창 끄기
browser.find_element(By.LINK_TEXT, '튜토리얼 닫기').click()
# '//*[@id="tutorialTooltip"]/div[2]/button/span/i'

# # 1차 카테고리 아래 화살표 클릭, 패션의류 클릭해서 필터창 나오게 하기
browser.find_element(By.XPATH, '//*[@id="category-header"]/div[1]/div[2]/div/div[1]/div[1]').click()
time.sleep(3)
browser.find_element(By.XPATH, '//*[@id="category-header"]/div[3]/div/div/div[1]').click()

# #필터 선택, 중소형 필터선택
# browser.find_element(By.XPATH, '//*[@id="app"]/div/main/div/div/div/div[2]/div[1]/div/div[2]/div[1]/div[1]/div/div/div/span').click()
# # '중소형키워드' XPATH로 경로찾기가 어려워서, '클래스네임'속성값으로 특정함.
# browser.find_element(By.CLASS_NAME, 'filter-title-wrapper').click()
# time.sleep(2) # 다음 코드가 진행이 안되어서, 타임슬립 넣어봤더니 진행됨.

#필터 선택, 중소형 필터선택
browser.find_element(By.XPATH, '//*[@id="app"]/div/main/div/div/div/div[2]/div[1]/div/div[2]/div[1]/div[1]/div/div/div/span').click()
# '중소형키워드' XPATH로 경로찾기가 어려워서, 'full xpath'로 특정함.
browser.find_element(By.XPATH, '/html/body/div[4]/div/div[1]/div[1]/div[3]/div/div[1]').click()
time.sleep(1) # 다음 코드가 진행이 안되어서, 타임슬립 넣어봤더니 진행됨.


####################################그 다음(패션잡화)부터는 동일한 규칙으로 이동####################################################

for i in range (2,11) : # 1차 카테고리 처음부터 끝까지 검색, 아이템 스카우트 특성상 1차카테고리 '선택안함' 제외하고 다음부터 클릭
    # 스크룰바 맨위로 올리기
    browser.execute_script("window.scrollTo(document.body.scrollHeight,0)")
    time.sleep(3)
    browser.find_element(By.XPATH, '//*[@id="category-header"]/div[1]/div[2]/div/div[1]/div[1]').click() #1차 화살표 클릭
    time.sleep(2)
    # xpath i로 반복하려니 중간에 바뀌는 xpath커버 못함. 바뀌는 엑스패스 부분 'or' 넣어주고, contains 함수 사용
    browser.find_element(By.XPATH, f'//*[@id="category-header"]/div[3 or 4]/div/div/div/div[contains(text(),"{class1[i]}")]').click()  # 'i'번째 메뉴 선택
    time.sleep(2)    
    # 첫번재 카테고리 출력하기, 엑스패스 {i}사용하려고했으나 에러가생겨서, 실행한 실행창 텍스트 엑스패스를 긁어옴
    
    first_category = browser.find_element(By.XPATH, '//*[@id="category-header"]/div[1]/div[2]/div/div[1]/div[1]').text
    # 두번째 카테고리 첫번째 선택지 임의로 선택 / 아이템스카우트는 두번째 카테고리 첫번째 선택지 임의로 선택하면 그 다음 두번째~
    browser.find_element(By.XPATH, '//*[@id="category-header"]/div[1]/div[2]/div/div[2]/div[1]').click() # 2차 화살표 클릭
    time.sleep(2)   
    select_class2 = class2[i-1]
    if i == 2 :
        TwoCate = 4 #패션 의류 2차 Xpath
    else :
        TwoCate = 3 # 패션 잡화부터 쭉 2차 Xpath
    browser.find_element(By.XPATH, f'//*[@id="category-header"]/div[{TwoCate}]/div/div/div[1]').click() # 2차 화살표 첫번재 메뉴 선택 'or' 삽입
    time.sleep(2)
    for j in range (1,10) : #2차 카테고리
        if j == 1 :  # 엑스패스가 기존이랑 다름, 이번에도 if문을 사용해서 첫번째것만 따로 실행
            ThreeCate = 4
        else :
            ThreeCate = 3
        try :
            browser.execute_script(
                "window.scrollTo(document.body.scrollHeight,0)") # 스크룰바 올리기
            time.sleep(2)  
            # 최초 값 설정이후 첫번째 선택지는 '선택안함이므로' 건너띄고 선택한다.
            browser.find_element(By.XPATH, 
                                 '//*[@id="category-header"]/div[1]/div[2]/div/div[2]/div[1]').click() # 2차 화살표 재클릭
            time.sleep(3)            
            # 문제 있는 문장, 첫번째 반복만 실해되고 두번째 반복은 실행되지 않는다.
            
            try :
                browser.find_element(By.XPATH,f'//*[@id="category-header"]/div[3 or 4]/div/div/div/div[contains(text(),"{select_class2[j+1]}")]').click()           
                time.sleep(2)
            except Exception :
                print('2차 카테고리 서칭완료 1차 카테고리 다음으로 변경')
                break
                
            second_category = browser.find_element(By.XPATH, 
                                                   '//*[@id="category-header"]/div[1]/div[2]/div/div[2]/div[1]').text # 선택된 2차 카테고리 실행창 텍스트 긁기
            time.sleep(2)
            browser.find_element(By.XPATH, 
                                 '//*[@id="category-header"]/div[1]/div[2]/div/div[3]/div[1]').click() # 3차 화살표 클릭
            time.sleep(2)
            browser.find_element(By.XPATH, 
                                 f'//*[@id="category-header"]/div[{ThreeCate}]/div/div/div[1]').click() # 3차 첫번째 메뉴 선택, #엑스패스값 특이
            time.sleep(2)
            browser.execute_script(
                "window.scrollTo(document.body.scrollHeight,0)") # 스크룰바 올리기
            time.sleep(2)            
        # 스포츠레저에서 3차분류가 없는것들이 있다.
        except Exception :                            
            browser.find_element(By.XPATH, '//*[@id="category-header"]/div[1]/div[2]/div/div[3]/div[1]').click() # 3차 화살표 클릭하여 닫기
            time.sleep(2)
            while True :
                new_height = browser.execute_script("return document.body.scrollHeight") # 현재 페이지 높이
                # 스크룰 끝까지 내리기
                browser.execute_script("window.scrollTo(0, document.body.scrollHeight)")
                # 로딩 대기
                time.sleep(2)   
                # 내리고난 값을 last_height로 업데이트
                last_height = browser.execute_script("return document.body.scrollHeight")
                # 만약 처음 스크롤 높이 값과, 내리고 난 뒤 스크롤 높이 값이 같으면, 멈춰라 아니면 다시 위로 올라가서 실행
                if new_height == last_height:
                    for a in range(1,500) :
                        try :
                            name.append(browser.find_element(By.XPATH,
                                                             f'//*[@id="app"]/div/main/div/div/div/div[2]/div[2]/div[2]/div[2]/div/div[1]/div[2]/div/div/div/table/tbody[{a}]/tr/td[3]/div/div').text)
                            click.append(browser.find_element(By.XPATH,
                                                              f'//*[@id="app"]/div/main/div/div/div/div[2]/div[2]/div[2]/div[2]/div/div[1]/div[2]/div/div/div/table/tbody[{a}]/tr/td[6]/div/div').text)
                            supply.append(browser.find_element(By.XPATH,
                                                               f'//*[@id="app"]/div/main/div/div/div/div[2]/div[2]/div[2]/div[2]/div/div[1]/div[2]/div/div/div/table/tbody[{a}]/tr/td[7]/div/div').text)
                            competition.append(browser.find_element(By.XPATH,
                                                                    f'//*[@id="app"]/div/main/div/div/div/div[2]/div[2]/div[2]/div[2]/div/div[1]/div[2]/div/div/div/table/tbody[{a}]/tr/td[8]/div/div/div/div[2]').text)
                        except Exception :
                            for ab in range(1, a) :
                                onecha.append(first_category)
                                twocha.append(second_category)
                                threecha.append('없음')
                            break
                    break
#                 last_height = new_height
            print(first_category, '/', second_category)     
            print('-----구분선-----')                
            break 
        for k in range(20,26) : # 3차 카테고리
            try :
                # 스크룰바 맨위로 올리기
                browser.execute_script("window.scrollTo(document.body.scrollHeight,0)")
                time.sleep(2)
                browser.find_element(By.XPATH, '//*[@id="category-header"]/div[1]/div[2]/div/div[3]/div[1]').click() # 3차 화살표 재클릭
                time.sleep(2)
                if k >= 12 :
                    for _ in range (1,3) :
                        action.send_keys(Keys.ARROW_DOWN).perform()   
                time.sleep(1)
                browser.find_element(By.XPATH, f'//*[@id="category-header"]/div[3]/div/div/div[{k+1}]').click() # '선택안함' 제외하고 두번째 메뉴 선택
                time.sleep(2)
                third_category = browser.find_element(By.XPATH, '//*[@id="category-header"]/div[1]/div[2]/div/div[3]/div[1]').text # 선택된 2차 카테고리 실행창 텍스트 긁기
                time.sleep(2)
                print(first_category, '/', second_category, '/', third_category)
                while True :
                    new_height = browser.execute_script("return document.body.scrollHeight") # 현재 페이지 높이
                    # 스크룰 끝까지 내리기
                    browser.execute_script("window.scrollTo(0, document.body.scrollHeight)")
                    # 로딩 대기
                    time.sleep(2)   
                    # 내리고난 값을 last_height로 업데이트
                    last_height = browser.execute_script("return document.body.scrollHeight")
                    # 만약 처음 스크롤 높이 값과, 내리고 난 뒤 스크롤 높이 값이 같으면, 멈춰라 아니면 다시 위로 올라가서 실행
                    if new_height == last_height:
                        for b in range(1,500) :
                            try :
                                name.append(browser.find_element(By.XPATH,
                                                                 f'//*[@id="app"]/div/main/div/div/div/div[2]/div[2]/div[2]/div[2]/div/div[1]/div[2]/div/div/div/table/tbody[{b}]/tr/td[3]/div/div').text)
                                click.append(browser.find_element(By.XPATH,
                                                                  f'//*[@id="app"]/div/main/div/div/div/div[2]/div[2]/div[2]/div[2]/div/div[1]/div[2]/div/div/div/table/tbody[{b}]/tr/td[6]/div/div').text)
                                supply.append(browser.find_element(By.XPATH,
                                                                   f'//*[@id="app"]/div/main/div/div/div/div[2]/div[2]/div[2]/div[2]/div/div[1]/div[2]/div/div/div/table/tbody[{b}]/tr/td[7]/div/div').text)
                                competition.append(browser.find_element(By.XPATH,
                                                                        f'//*[@id="app"]/div/main/div/div/div/div[2]/div[2]/div[2]/div[2]/div/div[1]/div[2]/div/div/div/table/tbody[{b}]/tr/td[8]/div/div/div/div[2]').text)
                            except Exception :
                                for bc in range(1, b) :
                                    onecha.append(first_category)
                                    twocha.append(second_category)
                                    threecha.append(third_category)
                                break                           
                        break
#                     last_height = new_height
            except Exception :
                break    
        print('-----구분선-----')


        
data = {'1차' : onecha,
        '2차' :  twocha,     
        '3차' : threecha,
        '상품명' : name,
        '클릭' : click,
        '상품수' : supply,
        '경쟁강도' : competition
       }    
df = pd.DataFrame(data)
df.to_excel('크롤링완료본.xlsx')
time.sleep(10)

excel_file_path = '크롤링완료본.xlsx'
df_read = pd.read_excel(excel_file_path, engine='openpyxl')
# 엑셀 파일에서 경로를 지정한다.

word_except = '김치|나이키|내셔널지오|뉴발|다이소|디올|디스커버리|디즈니|대여|랄프로렌|루이비통|르꼬끄|레고|로로희|\
망그러진곰|미니언즈|밀라노샵|메종키츠네|몽클레어|비비고|샤넬|슈프림|아디다스|이케아|이마트|에어포스|유니클로|에잇세컨즈|\
자라|루피|조던|캉골|카카오|코스트코|코오롱|트레이더스|탑텐|퓨마|파타고니아|뽀로로|-'
filtered_df = df_read[~df_read['상품명'].str.contains('[a-zA-Z]')&~df_read['상품명'].str.contains('[0-9]')
                      &~df_read['상품명'].str.contains(word_except)]
# 상품명 열에서 영문,숫자 워드익셉트가 들어간것은 제외시킨다. 

filtered_df.to_excel('크롤링완료본_영어_브랜드 제외.xlsx')
# 수정한것을 다시 저장,


##################################### Top 40 6개월 매출 검색하기
# 확장프로그램 수기로 설치하고 다시돌린다.

config_name = []
sales = []
rank_key = pd.read_excel('크롤링완료본_영어_브랜드 제외.xlsx')
# 엑셀 파일에서 경로를 지정한다.



browser.find_element(By.XPATH, 
                     '//*[@id="app"]/div/header/div/div[2]/a[2]/span').click() # 키워드 분석 클릭
time.sleep(3)


for i in range(0,20) :
    browser.find_element(By.CLASS_NAME,'keyword-search-input').click()
    k = rank_key.loc[i,'상품명']
    config_name.append(k)
    browser.find_element(By.CLASS_NAME,'keyword-search-input').send_keys(k) # 순차 입력
    browser.find_element(By.CLASS_NAME,'keyword-search-input').send_keys(Keys.ENTER) # 검색버튼 클릭
    pause = WebDriverWait(browser, 10).until(EC.presence_of_element_located((By.XPATH,
                                                                             '//*[@id="app"]/div/main/div/div/div/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]')))
    time.sleep(1)

    product_sale = browser.find_element(By.XPATH,
                                        '//*[@id="app"]/div/main/div/div/div/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]').text
#     time.sleep(1)
    sales.append(browser.find_element(By.XPATH,
                                      '//*[@id="app"]/div/main/div/div/div/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]').text) # 매출긁어오기
    print(k,product_sale)
    search_box = browser.find_element(By.XPATH,'//input') 
    search_box.clear()
#     time.sleep(2)


sales

sales_data = {'재확인' : config_name,
              'top40매출' : sales }

sales_df = pd.DataFrame(sales_data)

New_df = pd.concat([rank_key, sales_df], axis=1)
New_df
